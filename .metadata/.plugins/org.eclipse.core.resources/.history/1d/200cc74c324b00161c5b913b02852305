package rivittaja.main;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.logging.Logger;


public class Rivittaja {

	private static final Logger LOGGER = Logger.getLogger(Rivittaja.class.getName());
	private static String inputEncoding = System.getProperty("file.encoding"); //Windows-1252;
	private static String outputFilename;
	
	public static void main(String[] args) {
		
				int rowCount = 0;
				String line = null;

				if (args.length < 2 || args[0].equals("-help")) {
					printUsage();
					System.exit(4);
				}

				String inputFilename = args[0];
				int rowsToExpand = Integer.parseInt(args[1]);
				parseOptions(args);

				LOGGER.info("Java runtime is " + System.getProperty("java.version") + " (" + System.getProperty("java.vendor") + ")");
				LOGGER.info("Processing input file " + inputFilename);
				LOGGER.info("Input encoding is " + inputEncoding);
				LOGGER.info("Rows to add " + rowsToExpand);
				
				byte[] buffer = new byte[200 + 1];
				InputStream is = new BufferedInputStream(new FileInputStream(inputFilename));
				
				try {
					OutputStream os;

					if (outputFilename == null) {
						os = System.out;
					} else {
						os = new BufferedOutputStream(new FileOutputStream(outputFilename));
					}
					
					BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os));
					
					if (headerFileName != null) {
						InputStream hdrIs = new FileInputStream(headerFileName);
						BufferedReader reader = new BufferedReader(new InputStreamReader(hdrIs, inputEncoding));
						try {
							writer.write(reader.readLine() + "\r\n");
						} finally {
							reader.close();
						}
					}
					
					try {
						if ("RECORD".equalsIgnoreCase(fileFormat)) {
							for (; true; rowCount++) {
								int reserved = is.read();
								if (reserved == -1)
									break;
								int rowLength = is.read() << 16 | is.read() << 8 | is.read();
								int bytesRead = is.read(buffer, 0, rowLength);
								if (bytesRead != rowLength)
									throw new RuntimeException("Output file is corrupted");
								line = new String(buffer, 0, rowLength, inputEncoding);
								writer.write(line + "\r\n");
							}
						} else {
							// RECFM=FB tai VB
							for (@SuppressWarnings("unused")
							int cb = 0; (cb = is.read(buffer)) != -1; rowCount++) {
								int length = (noLength) ? lrecl : (buffer[0] & 0xFF) << 8 | (buffer[1] & 0xFF);
								line = new String(buffer, 2, length, inputEncoding);
								writer.write(line.replaceFirst("([^\000]*)", "$1\r\n"));
							}
						}
					} finally {
						writer.close();
						LOGGER.info("Processed " + rowCount + " rows ");
					}
				} finally {
					is.close();
				}
			}

			private static void parseOptions(String[] args) {
				try {
					for (int i = 2; i < args.length;) {
						String arg = args[i++];
						if (arg.equalsIgnoreCase("-inputEncoding") || arg.equalsIgnoreCase("-ie"))
							inputEncoding = args[i++];
						else if (arg.equals("-outputEncoding") || arg.equalsIgnoreCase("-oe"))
							outputEncoding = args[i++];
						else if (arg.equals("-output"))
							outputFilename = args[i++];
						else if (arg.equals("-noLength") || arg.equalsIgnoreCase("-nl"))
							noLength = true;
						else if (arg.equals("-fileFormat") || arg.equalsIgnoreCase("-ff"))
							fileFormat = args[i++];
						else if (arg.equals("-header") || arg.equalsIgnoreCase("-hdr")) {
							headerFileName = args[i++];
							if (!new File(headerFileName).exists()) {
								throw new IllegalArgumentException("Header file " + headerFileName + " doesn't exist");
							}
						}
					}
				} catch (RuntimeException e) {
					StringBuilder sb = new StringBuilder();
					for (String str : args)
						sb.append(str + " ");
					LOGGER.warning("Parsing failed. Input params: " + sb.toString());
					throw e;
				}
			}

			private static void printUsage() {
				StringBuilder sb = new StringBuilder();
				sb.append("Usage: java tiha.PostUnloadFormat <path to input file> <record length> [options]\n");
				sb.append("\tOptions:\n");
				sb.append("\t\t-help\tDisplays all options\n");
				sb.append("\t\t-ie <encoding>\tEncoding of given input file. Defaults to IBM-1143\n");
				sb.append("\t\t-oe <encoding>\tEncoding of output file.Defaults to JVM's encoding\n");
				sb.append("\t\t-ouput <filepath>\tOutput file name\n");
				sb.append("\t\t-nl\tNo length in the beginning of each row\n");
				sb.append("\t\t-ff <fileformat>\tfileFormat or given file (e.g. RECORD)\n");
				sb.append("\t\t-hdr <header>\t\n");
				System.out.println(sb.toString());
			}

		}
		
		
		
		
		
		
		
		
	}

}
