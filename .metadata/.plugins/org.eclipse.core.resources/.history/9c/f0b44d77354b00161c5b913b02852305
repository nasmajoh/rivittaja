package rivittaja.main;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.logging.Logger;

public class Rivittaja {

	private static final Logger LOGGER = Logger.getLogger(Rivittaja.class.getName());
	private static String inputEncoding = System.getProperty("file.encoding"); // Windows-1252;
	private static String outputFilename;
	private static int rowsToExpand;
	private static int rowsToSkip;

	public static void main(String[] args) throws IOException {

		int rowCount = 0;

		if (args.length < 2 || args[0].equals("-help")) {
			printUsage();
			System.exit(4);
		}

		String inputFilename = args[0];
		rowsToExpand = Integer.parseInt(args[1]);
		parseOptions(args);

		LOGGER.info("Java runtime is " + System.getProperty("java.version") + " (" + System.getProperty("java.vendor")
				+ ")");
		LOGGER.info("Processing input file " + inputFilename);
		LOGGER.info("Input encoding is " + inputEncoding);
		LOGGER.info("Rows to add " + rowsToExpand);

		try {
			OutputStream os;

			outputFilename = "rivitetty_" + inputFilename;
			FileWriter fw = new FileWriter(outputFilename);
			BufferedWriter writer = new BufferedWriter(fw);
						
			try {

				BufferedReader reader = new BufferedReader(new FileReader(inputFilename));
				String line;
				while ((line = reader.readLine()) != null) {
					// process the line.
					writer.write(line);
					for (int i = 0; i < rowsToExpand; i++) {
						writer.write(System.getProperty("line.separator"));
					}
				}
			} finally {
				writer.close();
				LOGGER.info("Processed " + rowCount + " rows ");
			}
		} finally {
			is.close();
		}
	}

	private static void parseOptions(String[] args) {
		try {
			for (int i = 2; i < args.length;) {
				String arg = args[i++];
				if (arg.equalsIgnoreCase("--rowsToAdd") || arg.equalsIgnoreCase("-r"))
					rowsToExpand = Integer.parseInt(args[i++]);
				else if (arg.equals("--skipRows") || arg.equalsIgnoreCase("-s"))
					rowsToSkip = Integer.parseInt(args[i++]);

			}
		} catch (RuntimeException e) {
			StringBuilder sb = new StringBuilder();
			for (String str : args)
				sb.append(str + " ");
			LOGGER.warning("Parsing failed. Input params: " + sb.toString());
			throw e;
		}
	}

	private static void printUsage() {
		StringBuilder sb = new StringBuilder();
		sb.append("Usage: java tiha.PostUnloadFormat <path to input file> <record length> [options]\n");
		sb.append("\tOptions:\n");
		sb.append("\t\t-help\tDisplays all options\n");
		sb.append("\t\t-ie <encoding>\tEncoding of given input file. Defaults to IBM-1143\n");
		sb.append("\t\t-oe <encoding>\tEncoding of output file.Defaults to JVM's encoding\n");
		sb.append("\t\t-ouput <filepath>\tOutput file name\n");
		sb.append("\t\t-nl\tNo length in the beginning of each row\n");
		sb.append("\t\t-ff <fileformat>\tfileFormat or given file (e.g. RECORD)\n");
		sb.append("\t\t-hdr <header>\t\n");
		System.out.println(sb.toString());
	}

}
